<!doctype html>
<html lang="en" >
<head>
<meta charset="utf-8" >
<meta name="viewport" content = "width=device-width,user-scalable=no,minimum-scale=1.0,maximum-scale=1.0" >
<meta name=description content="Real-time 3D in your browser" >
<meta name=keywords content="Three.js,WebGL,JavaScript,GitHub,FOSS,3D,STEM" >
<meta name = "date" content = "2017-11-13" >
<title></title>
<style>

	body { font: 11pt monospace; margin: 0; overflow: hidden; }
	a { color: crimson; text-decoration: none; }
	a:hover, a:focus { background-color: yellow; color: #aaa; text-decoration: underline }

	button { background-color: #ddd; border: none; color: #322; cursor: pointer; padding: 3px 5px; }
	button:hover { background: #ccc; color: #fff }

	#divMenu { margin: 0 20px; position: absolute; }

</style>
</head>
<body>
<script src = "https://cdn.rawgit.com/mrdoob/three.js/dev/build/three.min.js" ></script>
<script src = "https://cdn.rawgit.com/mrdoob/three.js/dev/examples/js/controls/OrbitControls.js" ></script>

	<div id = "divMenu" >

		<div id = "divTitle" ></div>

		<div id = "divContents" >
			<button onclick=controls.autoRotate=!controls.autoRotate; >rotation</button>

			<input type=range id=inpExplode oninput=explodeCubes(); min=0.1 max=2 value=1 step=0.1 >

		</div>

	</div>

<script>

	let offset;

	var renderer, camera, controls, scene;
	var geometry, material, mesh;

	init();
	animate();

	function init() {

		divTitle.innerHTML = '<h1><a href="" >' + location.href.split( '/' ).pop().slice( 0, -5 ).replace( /-/g, ' ' ) +'</a></h1>';

		renderer = new THREE.WebGLRenderer( { alpha: 1, antialias: true }  );
		renderer.setSize( window.innerWidth, window.innerHeight );

		document.body.appendChild( renderer.domElement );

		camera = new THREE.PerspectiveCamera( 40, window.innerWidth / window.innerHeight, 1, 1000 );
		camera.position.set( 100, 100, 100 );
		camera.up.set( 0, 0, 1 );

		controls = new THREE.OrbitControls( camera, renderer.domElement );

		scene = new THREE.Scene();

		window.addEventListener( 'resize', onWindowResize, false );

		window.addEventListener( 'orientationchange', onWindowResize, false );

		const axesHelper = new THREE.AxesHelper( 50 );
		scene.add( axesHelper );

		geometry = new THREE.BoxGeometry( 50, 50, 50 );
		material = new THREE.MeshNormalMaterial();
		mesh = new THREE.Mesh( geometry, material );
//		scene.add( mesh );

		cubes = drawCubes();
		scene.add( cubes )

		offsetCubes();

	}


	function explodeCubes(  ) {

		const bbox = new THREE.Box3().setFromObject( cubes );
		const sphere = bbox.getBoundingSphere();
		center = sphere.center;
		radius = sphere.radius;

		console.log( 'center', center );
		console.log( 'radius', radius );

		scale = parseFloat( inpExplode.value );
console.log( '', scale);

		for ( var i = 0; i < cubes.children.length; i++ ) {

			cube = cubes.children[ i ];
			cube.position.copy( cube.userData.position.clone().multiplyScalar( scale ) );

		}


	}



	function offsetCubes() {

		offset = new THREE.Vector3( 100 * Math.random() -50, 100 * Math.random() -50, 100 * Math.random() -50 );

		const axesHelper = new THREE.AxesHelper( 50 );
		scene.add( axesHelper );
		axesHelper.position.copy( offset );
		cubes.position.copy( offset);

		for ( var i = 0; i < cubes.children.length; i++ ) {

			cube = cubes.children[ i ];
			cube.userData.position = cube.position.clone();

		}
	}


	function drawCubes() {

		const cubes = new THREE.Object3D();
		let geometry, material, mesh, edges;
		const radius = 50;
		geometry = new THREE.BoxGeometry( 10, 10, 10 );

		for ( let i = 0; i < 50; i++ ) {

			material = new THREE.MeshPhongMaterial( {
				color: 0xffffff * Math.random(),
				emissive: 0xffffff * Math.random(),
				opacity: Math.random(),
				specular: 0xffffff * Math.random(),
//				shading: THREE.FlatShading,
//				shininess: 10,
				transparent: true
			} );

			material = new THREE.MeshNormalMaterial();

			mesh = new THREE.Mesh( geometry, material );
			mesh.position.set( radius * Math.random() - 0.5 * radius, radius * Math.random() - 0.5 * radius, radius * Math.random() - 0.5 * radius );
			mesh.rotation.set( 6.3 * Math.random(), 1.57 * Math.random(), 3.14 * Math.random() );
			mesh.castShadow = true;
			mesh.receiveShadow = true;
			cubes.add( mesh );

			geometryEdge = new THREE.EdgesGeometry( mesh.geometry ); // or WireframeGeometry
			material = new THREE.LineBasicMaterial( { color: 0x000000, linewidth: 1 } );
			edges = new THREE.LineSegments( geometryEdge, material );
			mesh.add( edges ); // add wireframe as a child of the parent mesh

		}

		return cubes;

	}





	function onWindowResize() {

		camera.aspect = window.innerWidth / window.innerHeight;
		camera.updateProjectionMatrix();

		renderer.setSize( window.innerWidth, window.innerHeight );

//console.log( 'onWindowResize  window.innerWidth', window.innerWidth );

	}



	function animate() {

		requestAnimationFrame( animate );
		renderer.render( scene, camera );
		controls.update();

	}

</script>
</body>
</html>